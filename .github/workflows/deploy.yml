name: Deploy to Lightsail Container

on:
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deploy Target (back/front)'
        required: true
        type: choice
        options:
        - back
        - front

jobs:
  # 백엔드 배포 작업
  deploy-backend:
    if: github.event.inputs.deploy_target == 'back'
    runs-on: build
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    - name: Grant execute permission for gradlew
      run: |
        cd back
        chmod +x gradlew
    
    - name: Build with Gradle
      run: |
        cd back
        ./gradlew bootJar
    
    - name: Build Docker image
      run: |
        cd back
        docker build -t scrumble-spring:latest .
    
    - name: Push to Lightsail
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ap-northeast-2
        BACKEND_SERVICE_NAME: ${{ secrets.BACKEND_SERVICE_NAME }}
      run: |
        cd back
        aws lightsail push-container-image \
          --service-name $BACKEND_SERVICE_NAME \
          --label spring \
          --image scrumble-spring:latest
        
        # Get the latest image URL
        SPRING_IMAGE=$(aws lightsail get-container-images --service-name $BACKEND_SERVICE_NAME --query 'containerImages[?contains(image,`spring`)]|[0].image' --output text)
    
    - name: Deploy backend
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ap-northeast-2
        BACKEND_SERVICE_NAME: ${{ secrets.BACKEND_SERVICE_NAME }}
      run: |
        # Get the latest image URL
        SPRING_IMAGE=$(aws lightsail get-container-images --service-name $BACKEND_SERVICE_NAME --query 'containerImages[?contains(image,`spring`)]|[0].image' --output text)
        
        aws lightsail create-container-service-deployment \
          --service-name $BACKEND_SERVICE_NAME \
          --containers "{
            \"spring\": {
              \"image\": \"${SPRING_IMAGE}\",
              \"ports\": {\"8080\": \"HTTP\"},
              \"environment\": {
                \"SPRING_PROFILES_ACTIVE\": \"prod\",
                \"DB_URL\": \"${{ secrets.DB_URL }}\",
                \"DB_USERNAME\": \"${{ secrets.DB_USERNAME }}\",
                \"DB_PASSWORD\": \"${{ secrets.DB_PASSWORD }}\",
                \"REDIS_HOST\": \"${{ secrets.REDIS_HOST }}\",
                \"REDIS_PASSWORD\": \"${{ secrets.REDIS_PASSWORD }}\"
              }
            }
          }"

  # 프론트엔드 배포 작업
  deploy-frontend:
    if: github.event.inputs.deploy_target == 'front'
    runs-on: build
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install dependencies and build
      run: |
        cd front
        npm install
        npm run build
    
    - name: Build Docker image
      run: |
        cd front
        docker build -t scrumble-frontend:latest .
    
    - name: Push to Lightsail
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ap-northeast-2
        FRONTEND_SERVICE_NAME: ${{ secrets.FRONTEND_SERVICE_NAME }}
      run: |
        cd front
        aws lightsail push-container-image \
          --service-name $FRONTEND_SERVICE_NAME \
          --label frontend \
          --image scrumble-frontend:latest
        
        # Get the latest image URL
        FRONTEND_IMAGE=$(aws lightsail get-container-images --service-name $FRONTEND_SERVICE_NAME --query 'containerImages[?contains(image,`frontend`)]|[0].image' --output text)
    
    - name: Deploy frontend
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ap-northeast-2
        FRONTEND_SERVICE_NAME: ${{ secrets.FRONTEND_SERVICE_NAME }}
      run: |
        # Get the latest image URL
        FRONTEND_IMAGE=$(aws lightsail get-container-images --service-name $FRONTEND_SERVICE_NAME --query 'containerImages[?contains(image,`frontend`)]|[0].image' --output text)
        
        aws lightsail create-container-service-deployment \
          --service-name $FRONTEND_SERVICE_NAME \
          --containers "{
            \"frontend\": {
              \"image\": \"${FRONTEND_IMAGE}\",
              \"ports\": {\"80\": \"HTTP\"},
              \"environment\": {
                \"BACKEND_URL\": \"${{ secrets.BACKEND_URL }}\",
                \"NGINX_ENVSUBST_TEMPLATE_DIR\": \"/etc/nginx\",
                \"NGINX_ENVSUBST_TEMPLATE_SUFFIX\": \".conf\",
                \"NGINX_ENVSUBST_OUTPUT_DIR\": \"/etc/nginx\"
              }
            }
          }"